<html>
<head>

<title>Google Maps JavaScript API v3 Example: Common Loader</title>
</head>

<body onload="initialize()">

  <div align="center" id="map_canvas" style="width:500px; height:400px"></div>

</body>

<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
<script type="text/javascript">
/**
* Returns an XMLHttp instance to use for asynchronous
* downloading. This method will never throw an exception, but will
* return NULL if the browser does not support XmlHttp for any reason.
* @return {XMLHttpRequest|Null}
*/
var map;
var geocoder;
function createXmlHttpRequest() {
 try {
   if (typeof ActiveXObject != 'undefined') {
     return new ActiveXObject('Microsoft.XMLHTTP');
   } else if (window["XMLHttpRequest"]) {
	
     return new XMLHttpRequest();
	 
   }
   
 } catch (e) {
   changeStatus(e);
 }
 
 return null;
};

/*http://gmaps-samples-v3.googlecode.com/svn/trunk/xmlparsing/*/
/**
* This functions wraps XMLHttpRequest open/send function.
* It lets you specify a URL and will call the callback if
* it gets a status code of 200.
* @param {String} url The URL to retrieve
* @param {Function} callback The function to call once retrieved.
*/
function downloadUrl(url, callback) {

 var status = -1;
 var request = createXmlHttpRequest();
 
 if (!request) {
   return false;
 }

 request.onreadystatechange = function() {
   if (request.readyState == 4) {
     try {
	 
       status = request.status;
     } catch (e) {
	 
       // Usually indicates request timed out in FF.
     }
     if (status == 200) {
	 
      callback(request.responseXML, request.status);
	 
       request.onreadystatechange = function() {};
     }
   }
 }
 
 request.open('GET', url, true);
 try {
 
   request.send(null);
 } catch (e) {

   changeStatus(e);
 }
};

/**
 * Parses the given XML string and returns the parsed document in a
 * DOM data structure. This function will return an empty DOM node if
 * XML parsing is not supported in this browser.
 * @param {string} str XML string.
 * @return {Element|Document} DOM.
 */
function xmlParse(str) {

  if (typeof ActiveXObject != 'undefined' && typeof GetObject != 'undefined') {
    var doc = new ActiveXObject('Microsoft.XMLDOM');
    doc.loadXML(str);
    return doc;
  }

  if (typeof DOMParser != 'undefined') {
    return (new DOMParser()).parseFromString(str, 'text/xml');
  }

  return createElement('div', null);
}

/**
 * Appends a JavaScript file to the page.
 * @param {string} url
 */
function downloadScript(url) {

  var script = document.createElement('script');
  script.src = url;
  document.body.appendChild(script);
}

  function initialize() {
    var myLatlng = new google.maps.LatLng(37.4419, -122.1419);
    var myOptions = {
      zoom: 6,
      center: myLatlng,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    }
    map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
	geocoder = new google.maps.Geocoder();

	
    downloadUrl("result.xml", function(data) {
	
      var locations = data.documentElement.getElementsByTagName("result");
	  
	  var marker, i;
	  var infowindow = new google.maps.InfoWindow();
      for (i = 0; i < locations.length; i++) {
		codeAddress(locations[i].getElementsByTagName("formattedLocation")[0].childNodes[0].nodeValue);
/*google.maps.event.addListener(marker, 'click', (function(marker, i) {
        return function() {
          infowindow.setContent(locations[i].getElementsByTagName("jobtitle")[0].childNodes[0].nodeValue);
          infowindow.open(map, marker);
        }
      })(marker, i));*/
		
	  }
	   
    });
  }
  
  function codeAddress(address) {
        geocoder.geocode( { 'address': address}, function(results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            map.setCenter(results[0].geometry.location);
            var marker = new google.maps.Marker({
				position: results[0].geometry.location,
                map: map
            });
          } else {
            alert('Geocode was not successful for the following reason: ' + status);
          }
        });
      }
	  
/**
 * XML---HTML
 * result represents in the left page
 */	  
	  
	var xmlDoc = null;
        
        if(window.ActiveXObject){              //  IE
            xmlDoc = new ActiveXObject("Microsoft.XMLDOM");  
        }else if(document.implementation.createDocument){        //Firefox  Opera  Chrome...
            xmlDoc = document.implementation.createDocument("","",null);
        }else{
            alert("Your browser can't handle this script");
        }
        
        if(xmlDoc != null){
            xmlDoc.async = false;
            xmlDoc.load("result.xml");
            
            //document.write("<table border='1'>");
           
            var x=xmlDoc.getElementsByTagName("result");
            document.write("<br/>");
           
            
            for(j=0; j<x.length;j++){
				document.write("<a href='"+x[j].getElementsByTagName("url")[0].childNodes[0].nodeValue+"'>");
				document.write(x[j].getElementsByTagName("jobtitle")[0].childNodes[0].nodeValue)
				document.write("</a>")
				document.write("<br />");
                document.write(x[j].getElementsByTagName("formattedLocation")[0].childNodes[0].nodeValue);
				document.write("&nbsp&nbsp&nbsp");
				document.write(x[j].getElementsByTagName("company")[0].childNodes[0].nodeValue);
				document.write("<br />");
				document.write(x[j].getElementsByTagName("snippet")[0].childNodes[0].nodeValue);
				document.write("<br />");
				document.write(x[j].getElementsByTagName("formattedRelativeTime")[0].childNodes[0].nodeValue);
				document.write("<br />");
				document.write("<hr />");
            }
            document.write("</tr>");
            //document.write("</table>");
        }  
	

</script>

</html>
